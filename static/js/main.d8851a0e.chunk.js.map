{"version":3,"sources":["listItems.js","helpers.js","Quiz.js","CoronaTimeSeries.js","App.js","serviceWorker.js","index.js"],"names":["MainListItems","history","useHistory","ListItem","button","onClick","push","ListItemIcon","ListItemText","primary","shuffle","array","sort","Math","random","StyledTableCell","withStyles","theme","head","backgroundColor","palette","common","black","color","white","body","fontSize","TableCell","StyledTableRow","root","background","default","TableRow","renderHTML","rawHTML","React","createElement","dangerouslySetInnerHTML","__html","useStyles","makeStyles","width","marginTop","spacing","marginRight","actionsContainer","marginBottom","resetContainer","padding","formControl","margin","minWidth","selectEmpty","selectionContainer","display","justifyContent","correctAnswer","table","maxHeight","Quiz","classes","useState","activeStep","setActiveStep","steps","questionsCount","setQuestionsCount","type","setType","difficulty","setDifficulty","questions","setQuestions","loading","setLoading","currentQuestion","setCurrentQuestion","selectedAnswer","setSelectedAnswer","useEffect","a","fetch","response","json","resultsFormat","results","map","question","options","fetchQuestions","handleNext","prevActiveStep","handleBack","handleChange","event","target","value","handleChangeType","handleChangeDifficulty","handleNextQuestion","questionsLength","length","handleAnswerChange","className","Stepper","orientation","label","index","Step","key","StepLabel","StepContent","FormControl","required","InputLabel","id","Select","labelId","onChange","MenuItem","FormHelperText","FormLabel","component","RadioGroup","aria-label","name","FormControlLabel","control","Radio","CircularProgress","Card","variant","Number","CardContent","Typography","title","gutterBottom","answer","CardActions","Button","size","disabled","Paper","square","elevation","TableContainer","Table","TableHead","align","TableBody","row","scope","Icon","style","dataUrl","setResponse","isLoading","setIsLoading","selectedCountry","setSelectedCountry","responseJson","console","error","getData","res","countries","Object","keys","item","Autocomplete","getOptionLabel","option","renderInput","params","TextField","slice","height","data","top","right","left","bottom","strokeDasharray","dataKey","stroke","activeDot","r","Copyright","Link","href","Date","getFullYear","toolbar","paddingRight","toolbarIcon","alignItems","mixins","appBar","zIndex","drawer","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","marginLeft","enteringScreen","menuButton","menuButtonHidden","flexGrow","drawerPaper","position","whiteSpace","drawerPaperClose","overflowX","breakpoints","up","appBarSpacer","content","overflow","container","paddingTop","paddingBottom","paper","flexDirection","fixedHeight","Boolean","window","location","hostname","match","ReactDOM","render","open","setOpen","fixedHeightPaper","clsx","CssBaseline","AppBar","Toolbar","IconButton","edge","noWrap","Badge","badgeContent","Drawer","Divider","Container","maxWidth","Grid","xs","md","lg","exact","path","CoronaTimeSeries","Box","pt","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.d8851a0e.chunk.js","sourcesContent":["import React from 'react';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport DashboardIcon from '@material-ui/icons/Dashboard';\nimport ShoppingCartIcon from '@material-ui/icons/ShoppingCart';\nimport PeopleIcon from '@material-ui/icons/People';\nimport BarChartIcon from '@material-ui/icons/BarChart';\nimport LayersIcon from '@material-ui/icons/Layers';\nimport AssignmentIcon from '@material-ui/icons/Assignment';\n\n\nimport { useHistory } from 'react-router-dom';\n\n\n\nexport const MainListItems = () => {\n    const history = useHistory()\n    return (\n\n        <div>\n            <ListItem button onClick={() => history.push('/corona-timeseries')}>\n                <ListItemIcon>\n                    <DashboardIcon />\n                </ListItemIcon>\n                <ListItemText primary=\"Feature1\" />\n            </ListItem>\n            <ListItem button>\n                <ListItemIcon>\n                    <ShoppingCartIcon />\n                </ListItemIcon>\n                <ListItemText primary=\"Feature2\" />\n            </ListItem>\n            <ListItem button>\n                <ListItemIcon>\n                    <PeopleIcon />\n                </ListItemIcon>\n                <ListItemText primary=\"Feature3\" />\n            </ListItem>\n            <ListItem button>\n                <ListItemIcon>\n                    <BarChartIcon />\n                </ListItemIcon>\n                <ListItemText primary=\"Feature4\" />\n            </ListItem>\n            <ListItem button>\n                <ListItemIcon>\n                    <LayersIcon />\n                </ListItemIcon>\n                <ListItemText primary=\"Feature5\" />\n            </ListItem>\n        </div >\n\n    )\n};\n\nexport const secondaryListItems = (\n    <div>\n        {/* <ListSubheader inset>Saved reports</ListSubheader>\n        <ListItem button>\n            <ListItemIcon>\n                <AssignmentIcon />\n            </ListItemIcon>\n            <ListItemText primary=\"Current month\" />\n        </ListItem> */}\n        {/* <ListItem button>\n            <ListItemIcon>\n                <AssignmentIcon />\n            </ListItemIcon>\n            <ListItemText primary=\"Last quarter\" />\n        </ListItem>\n        <ListItem button>\n            <ListItemIcon>\n                <AssignmentIcon />\n            </ListItemIcon>\n            <ListItemText primary=\"Year-end sale\" />\n        </ListItem> */}\n    </div>\n);","export const shuffle = (array) => array.sort(() => Math.random() - 0.5)\n","import React, { useEffect } from 'react';\n\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepLabel from '@material-ui/core/StepLabel';\nimport StepContent from '@material-ui/core/StepContent';\nimport Button from '@material-ui/core/Button';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\n\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\n\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\n\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\n\nimport FormLabel from '@material-ui/core/FormLabel';\n\n\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Icon from '@material-ui/core/Icon';\n\nimport { shuffle } from './helpers'\n\nconst StyledTableCell = withStyles(theme => ({\n    head: {\n        backgroundColor: theme.palette.common.black,\n        color: theme.palette.common.white,\n    },\n    body: {\n        fontSize: 14,\n    },\n}))(TableCell);\n\nconst StyledTableRow = withStyles(theme => ({\n    root: {\n        '&:nth-of-type(odd)': {\n            backgroundColor: theme.palette.background.default,\n        },\n    },\n}))(TableRow);\n\n\n\nconst renderHTML = (rawHTML) => React.createElement(\"div\", { dangerouslySetInnerHTML: { __html: rawHTML } });\n\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        width: '100%',\n    },\n    button: {\n        marginTop: theme.spacing(1),\n        marginRight: theme.spacing(1),\n    },\n    actionsContainer: {\n        marginBottom: theme.spacing(2),\n    },\n    resetContainer: {\n        padding: theme.spacing(3),\n    },\n    formControl: {\n        margin: theme.spacing(1),\n        minWidth: 120,\n    },\n    selectEmpty: {\n        marginTop: theme.spacing(2),\n\n    },\n    selectionContainer: {\n        display: \"flex\",\n        justifyContent: 'space-around'\n\n    },\n    correctAnswer: {\n        color: 'green',\n\n    },\n    table: {\n        maxHeight: '100px',\n    },\n}));\n\nfunction getSteps() {\n    return ['Choose Quiz Type', 'Quiz'];\n}\n\n// function getStepContent(step) {\n//     switch (step) {\n//         case 0:\n//             return `For each ad campaign that you create, you can control how much\n//               you're willing to spend on clicks and conversions, which networks\n//               and geographical locations you want your ads to show on, and more.`;\n//         case 1:\n//             return 'An ad group contains one or more ads which target a shared set of keywords.';\n//         case 2:\n//             return `Try out different ad text to see what brings in the most customers,\n//               and learn how to enhance your ads using features like ad extensions.\n//               If you run into any problems with your ads, find out how to tell if\n//               they're running and how to resolve approval issues.`;\n//         default:\n//             return 'Unknown step';\n//     }\n// }\n\nexport default function Quiz() {\n    const classes = useStyles();\n    const [activeStep, setActiveStep] = React.useState(0);\n    const steps = getSteps();\n    const [questionsCount, setQuestionsCount] = React.useState(10)\n    const [type, setType] = React.useState('multiple');\n    const [difficulty, setDifficulty] = React.useState('easy');\n    const [questions, setQuestions] = React.useState([])\n    const [loading, setLoading] = React.useState(false);\n    const [currentQuestion, setCurrentQuestion] = React.useState(0)\n    const [selectedAnswer, setSelectedAnswer] = React.useState('')\n\n    useEffect(() => {\n\n        async function fetchQuestions() {\n            try {\n                setLoading(true);\n                const response = await fetch(\n                    `https://opentdb.com/api.php?amount=${questionsCount}&difficulty=${difficulty}&type=${type}`\n                )\n                const json = await response.json();\n                const resultsFormat = json.results.map(question => {\n                    return {\n                        question: question['question'],\n                        options: shuffle([question['correct_answer'], ...question['incorrect_answers']]),\n                        correctAnswer: question['correct_answer']\n                    }\n                })\n                setQuestions(resultsFormat)\n                setLoading(false)\n            } catch (error) {\n                setLoading(false);\n            }\n        }\n        fetchQuestions()\n    }, [type, difficulty, questionsCount])\n    const handleNext = () => {\n        setActiveStep(prevActiveStep => prevActiveStep + 1);\n    };\n\n    const handleBack = () => {\n        setQuestions([])\n        setActiveStep(prevActiveStep => prevActiveStep - 1);\n    };\n\n    const handleReset = () => {\n        setCurrentQuestion(0)\n        setQuestionsCount(0)\n        setActiveStep(0);\n    };\n\n\n    const handleChange = event => {\n        setQuestionsCount(event.target.value);\n    };\n\n\n\n    const handleChangeType = event => {\n        setType(event.target.value);\n    };\n\n    const handleChangeDifficulty = event => {\n        setDifficulty(event.target.value)\n    }\n\n    const handleNextQuestion = () => {\n\n        const isCorrectAnswer = questions[currentQuestion]['correctAnswer'] === selectedAnswer\n\n        if (isCorrectAnswer) { }\n\n        const questionsLength = questions.length\n        if (currentQuestion < questionsLength) {\n            setCurrentQuestion(currentQuestion + 1)\n        }\n    }\n\n    const handleAnswerChange = event => {\n        setSelectedAnswer(event.target.value)\n    }\n\n\n    return (\n        <div className={classes.root}>\n            <Stepper activeStep={activeStep} orientation=\"vertical\">\n                {steps.map((label, index) => (\n                    <Step key={label}>\n                        <StepLabel>{label}</StepLabel>\n                        <StepContent>\n                            {index === 0 && (< div className={classes.selectionContainer}>\n                                <div>\n                                    <FormControl required className={classes.formControl}>\n                                        <InputLabel id=\"demo-simple-select-helper-label\"> Questions </InputLabel>\n                                        <Select\n                                            labelId=\"demo-simple-select-helper-label\"\n                                            id=\"demo-simple-select-helper\"\n                                            value={questionsCount}\n                                            onChange={handleChange}\n                                        >\n\n                                            <MenuItem value={10}>Ten</MenuItem>\n                                            <MenuItem value={20}>Twenty</MenuItem>\n                                            <MenuItem value={30}>Thirty</MenuItem>\n                                            <MenuItem value={40}>Forty</MenuItem>\n                                            <MenuItem value={50}>Fifty</MenuItem>\n\n                                        </Select>\n                                        <FormHelperText>no of questions to play</FormHelperText>\n                                    </FormControl>\n                                </div>\n                                <div>\n                                    <FormLabel component=\"legend\">Answer Type</FormLabel>\n                                    <RadioGroup aria-label=\"gender\" name=\"gender1\" value={type} onChange={handleChangeType}>\n                                        <FormControlLabel value=\"multiple\" control={<Radio />} label=\"Multiple Choice (Pick One)\" />\n                                        <FormControlLabel value=\"boolean\" control={<Radio />} label=\"True /False\" />\n                                    </RadioGroup>\n\n                                </div>\n                                <div>\n                                    <FormLabel component=\"legend\">Difficulty</FormLabel>\n                                    <RadioGroup aria-label=\"difficulty\" name=\"difficulty\" value={difficulty} onChange={handleChangeDifficulty}>\n                                        <FormControlLabel value=\"easy\" control={<Radio />} label=\"Easy\" />\n                                        <FormControlLabel value=\"medium\" control={<Radio />} label=\"Medium\" />\n                                        <FormControlLabel value=\"hard\" control={<Radio />} label=\"Hard\" />\n                                    </RadioGroup>\n\n                                </div>\n                            </div>)} {\n                                index === 1 && (<div>\n                                    {loading && <CircularProgress />}\n                                    <Card>\n                                        <CircularProgress variant=\"static\" value={Number((currentQuestion + 1) * 100 / questions.length)} />\n                                        <CardContent>\n                                            {questions.length > 0 && (<div>\n                                                {currentQuestion + 1}\n                                                <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\n                                                    {renderHTML(questions[currentQuestion]['question'])}\n                                                </Typography>\n\n\n                                                <RadioGroup aria-label=\"gender\" name=\"gender1\" value={selectedAnswer} onChange={handleAnswerChange}>\n                                                    {questions[currentQuestion]['options'].map(answer => {\n\n                                                        return (\n                                                            <FormControlLabel key={answer} value={answer} control={<Radio />} label={answer} />)\n\n                                                    })}\n\n                                                </RadioGroup>\n                                            </div>)}\n\n\n\n\n\n\n                                        </CardContent>\n                                        <CardActions>\n\n                                            {currentQuestion === questions.length - 1 ? <Button size=\"small\">Done</Button> : <Button size=\"small\" onClick={handleNextQuestion}>Next</Button>}\n                                        </CardActions>\n                                    </Card>\n\n                                </div>)\n                            }\n\n\n                            <div className={classes.actionsContainer}>\n                                <div>\n                                    <Button\n                                        disabled={activeStep === 0}\n                                        onClick={handleBack}\n                                        className={classes.button}\n                                    >\n                                        Back\n                  </Button>\n                                    <Button\n                                        variant=\"contained\"\n                                        color=\"primary\"\n                                        onClick={handleNext}\n                                        className={classes.button}\n                                    >\n                                        {activeStep === steps.length - 1 ? 'Finish' : 'Next'}\n                                    </Button>\n                                </div>\n                            </div>\n                        </StepContent>\n                    </Step>\n                ))}\n            </Stepper>\n            {activeStep === steps.length && (\n                <Paper square elevation={0} className={classes.resetContainer}>\n                    <Typography> you&apos;re finished , View results </Typography>\n                    <TableContainer component={Paper}>\n                        <Table className={classes.table} aria-label=\"customized table\">\n                            <TableHead>\n                                <TableRow>\n                                    <StyledTableCell>Question</StyledTableCell>\n                                    <StyledTableCell align=\"right\">Status</StyledTableCell>\n                                    <StyledTableCell align=\"right\">Correct</StyledTableCell>\n\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                {questions.map(row => (\n                                    <StyledTableRow key={row.question}>\n                                        <StyledTableCell component=\"th\" scope=\"row\">\n                                            <Typography>{renderHTML(row.question)}</Typography>\n                                        </StyledTableCell>\n                                        <StyledTableCell align=\"right\"><Icon style={{ color: 'green' }}>highlight_off</Icon></StyledTableCell>\n                                        <StyledTableCell align=\"right\">{row.correctAnswer}</StyledTableCell>\n\n                                    </StyledTableRow>\n                                ))}\n                            </TableBody>\n                        </Table>\n                    </TableContainer>\n                    <Button onClick={handleReset} className={classes.button}>\n                        Reset\n          </Button>\n                </Paper>\n            )}\n        </div>\n    );\n}\n","\n\nimport React, { useEffect, useState } from \"react\";\nimport {\n    LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer,\n} from 'recharts';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\n\n\nconst dataUrl = \"https://pomber.github.io/covid19/timeseries.json\"\nconst top100Films = [\n    { title: 'The Shawshank Redemption', year: 1994 },\n    { title: 'The Godfather', year: 1972 },\n    {\n        title: 'The Godfather: Part II', year: 197\n    }]\n\nconst renderLineChart = (res) => (\n\n    <LineChart\n        width={1080}\n        height={400}\n        data={res}\n        margin={{\n            top: 5, right: 30, left: 20, bottom: 5,\n        }}\n    >\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis dataKey=\"date\" />\n        <YAxis />\n        <Tooltip />\n        <Legend />\n        <Line type=\"monotone\" dataKey=\"deaths\" stroke=\"#8884d8\" activeDot={{ r: 8 }} />\n        <Line type=\"monotone\" dataKey=\"recovered\" stroke=\"#82ca9d\" />\n        <Line type=\"monotone\" dataKey=\"confirmed\" stroke=\"#223344\" />\n    </LineChart>\n\n);\n\n\nexport default () => {\n    const [response, setResponse] = useState({})\n    const [isLoading, setIsLoading] = useState(true);\n    const [selectedCountry, setSelectedCountry] = useState('US')\n    useEffect(() => {\n\n        async function getData() {\n            try {\n                let response = await fetch(dataUrl);\n                let responseJson = await response.json();\n                setResponse(responseJson)\n                setIsLoading(false)\n            } catch (error) {\n                console.error(error);\n            }\n        }\n        getData()\n\n    }, []); // <-- Have to pass in [] here!\n\n    const handleChange = (event, value) => {\n        if (value)\n            setSelectedCountry(value.title)\n    }\n\n\n    const countries = Object.keys(response).map(item => ({ title: item }))\n\n\n\n    return (\n        <div >{isLoading && <p>Wait I'm Loading comments for you</p>}\n            <Autocomplete\n                id=\"combo-box-demo\"\n                options={countries}\n                getOptionLabel={(option) => option.title}\n                style={{ width: 300 }}\n                onChange={handleChange}\n                renderInput={(params) => <TextField {...params} label=\"Choose A Country\" variant=\"outlined\" />}\n            />\n            {selectedCountry && response[selectedCountry] && <div> {response[selectedCountry].slice(-1)[0]['recovered']}</div>}\n            <br />\n            {selectedCountry && response[selectedCountry] && renderLineChart(response[selectedCountry])}</div>\n    );\n}","import React from 'react';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Drawer from '@material-ui/core/Drawer';\nimport Box from '@material-ui/core/Box';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport List from '@material-ui/core/List';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport Badge from '@material-ui/core/Badge';\nimport Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Link from '@material-ui/core/Link';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport NotificationsIcon from '@material-ui/icons/Notifications';\nimport { MainListItems, secondaryListItems } from './listItems';\nimport Quiz from './Quiz'\nimport CoronaTimeSeries from './CoronaTimeSeries'\n\nimport { Switch, Route } from \"react-router-dom\";\n\nfunction Copyright() {\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n      {'Copyright © '}\n      <Link color=\"inherit\" href=\"https://material-ui.com/\">\n        Your Website\n      </Link>{' '}\n      {new Date().getFullYear()}\n      {'.'}\n    </Typography>\n  );\n}\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex',\n  },\n  toolbar: {\n    paddingRight: 24, // keep right padding when drawer closed\n  },\n  toolbarIcon: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'flex-end',\n    padding: '0 8px',\n    ...theme.mixins.toolbar,\n  },\n  appBar: {\n    zIndex: theme.zIndex.drawer + 1,\n    transition: theme.transitions.create(['width', 'margin'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n  },\n  appBarShift: {\n    marginLeft: drawerWidth,\n    width: `calc(100% - ${drawerWidth}px)`,\n    transition: theme.transitions.create(['width', 'margin'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  menuButton: {\n    marginRight: 36,\n  },\n  menuButtonHidden: {\n    display: 'none',\n  },\n  title: {\n    flexGrow: 1,\n  },\n  drawerPaper: {\n    position: 'relative',\n    whiteSpace: 'nowrap',\n    width: drawerWidth,\n    transition: theme.transitions.create('width', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  drawerPaperClose: {\n    overflowX: 'hidden',\n    transition: theme.transitions.create('width', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n    width: theme.spacing(7),\n    [theme.breakpoints.up('sm')]: {\n      width: theme.spacing(9),\n    },\n  },\n  appBarSpacer: theme.mixins.toolbar,\n  content: {\n    flexGrow: 1,\n    height: '100vh',\n    overflow: 'auto',\n  },\n  container: {\n    paddingTop: theme.spacing(4),\n    paddingBottom: theme.spacing(4),\n  },\n  paper: {\n    padding: theme.spacing(2),\n    display: 'flex',\n    overflow: 'auto',\n    flexDirection: 'column',\n  },\n  fixedHeight: {\n    height: '100%',\n  },\n\n}));\n\nexport default function Dashboard() {\n  const classes = useStyles();\n  const [open, setOpen] = React.useState(false);\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n  const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\n\n  return (\n    <Switch>\n      <div className={classes.root}>\n        <CssBaseline />\n        <AppBar position=\"absolute\" className={clsx(classes.appBar, open && classes.appBarShift)}>\n          <Toolbar className={classes.toolbar}>\n            <IconButton\n              edge=\"start\"\n              color=\"inherit\"\n              aria-label=\"open drawer\"\n              onClick={handleDrawerOpen}\n              className={clsx(classes.menuButton, open && classes.menuButtonHidden)}\n            >\n              <MenuIcon />\n            </IconButton>\n            <Typography component=\"h1\" variant=\"h6\" color=\"inherit\" noWrap className={classes.title}>\n              Dashboard\n          </Typography>\n            <IconButton color=\"inherit\">\n              <Badge badgeContent={4} color=\"secondary\">\n                <NotificationsIcon />\n              </Badge>\n            </IconButton>\n          </Toolbar>\n        </AppBar>\n        <Drawer\n          variant=\"permanent\"\n          classes={{\n            paper: clsx(classes.drawerPaper, !open && classes.drawerPaperClose),\n          }}\n          open={open}\n        >\n          <div className={classes.toolbarIcon}>\n            <IconButton onClick={handleDrawerClose}>\n              <ChevronLeftIcon />\n            </IconButton>\n          </div>\n          <Divider />\n          <MainListItems></MainListItems>\n\n          <Divider />\n          {/* <List>{secondaryListItems}</List> */}\n        </Drawer>\n        <main className={classes.content}>\n\n\n\n          <div className={classes.appBarSpacer} />\n          <Container maxWidth=\"lg\" className={classes.container}>\n            <Grid container spacing={3}>\n              {/* Chart */}\n              <Grid item xs={12} md={12} lg={12} >\n                <Paper className={fixedHeightPaper}>\n                  <Route exact path=\"/\" component={Quiz} />\n                  <Route path=\"/corona-timeseries\" component={() => <div> <CoronaTimeSeries /></div>} />\n                </Paper>\n              </Grid>\n\n\n            </Grid>\n            <Box pt={4}>\n              <Copyright />\n            </Box>\n          </Container>\n        </main>\n      </div >\n    </Switch>\n  );\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from 'react-router-dom'\n\nReactDOM.render(<Router>  <App /></Router>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}